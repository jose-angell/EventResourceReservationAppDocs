"use strict";(self.webpackChunkevent_reservation_app_docs=self.webpackChunkevent_reservation_app_docs||[]).push([[1523],{6869:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"backend/arquitectura/adrs/adr-0005-repository-unitOfWork","title":"ADR 0005:Patrones Repository y Unit of Work","description":"Fecha:* 2025-07-27","source":"@site/docs/backend/arquitectura/adrs/adr-0005-repository-unitOfWork.md","sourceDirName":"backend/arquitectura/adrs","slug":"/backend/arquitectura/adrs/adr-0005-repository-unitOfWork","permalink":"/EventResourceReservationAppDocs/en/docs/backend/arquitectura/adrs/adr-0005-repository-unitOfWork","draft":false,"unlisted":false,"editUrl":"https://github.com/jose-angell/EventResourceReservationAppDocs/docs/backend/arquitectura/adrs/adr-0005-repository-unitOfWork.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"ADR 0005:Patrones Repository y Unit of Work"},"sidebar":"backendSidebar","previous":{"title":"ADR 0004:Adopci\xf3n de Clean Architecture","permalink":"/EventResourceReservationAppDocs/en/docs/backend/arquitectura/adrs/adr-0004-Adopcion-clean-architecture"},"next":{"title":"ADR 0006:Implementaci\xf3n del Patr\xf3n Result","permalink":"/EventResourceReservationAppDocs/en/docs/backend/arquitectura/adrs/adr-0006-patron-result"}}');var r=n(4848),s=n(8453);const o={sidebar_position:6,title:"ADR 0005:Patrones Repository y Unit of Work"},t="ADR 0005:   Implementaci\xf3n de los Patrones Repository y Unit of Work",c={},d=[{value:"Contexto",id:"contexto",level:2},{value:"Decisi\xf3n",id:"decisi\xf3n",level:2},{value:"Alternativas Consideradas",id:"alternativas-consideradas",level:2},{value:"Consecuencias",id:"consecuencias",level:2},{value:"Positivas (+)",id:"positivas-",level:3},{value:"Negativas (-)",id:"negativas--",level:3}];function l(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"adr-0005---implementaci\xf3n-de-los-patrones-repository-y-unit-of-work",children:"ADR 0005:   Implementaci\xf3n de los Patrones Repository y Unit of Work"})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Fecha:"})," 2025-07-27"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Estado:"})," [Aceptada]"]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"contexto",children:"Contexto"}),"\n",(0,r.jsx)(a.p,{children:"En el desarrollo de la aplicaci\xf3n EventResourceReservationApp, se ha optado por seguir una arquitectura limpia (Clean Architecture). Esta decisi\xf3n nos exige mantener las capas de dominio y aplicaci\xf3n desacopladas de los detalles de la infraestructura, como la base de datos y el ORM (Object-Relational Mapper).\r\nPara gestionar la persistencia de datos de forma robusta, eficiente y desacoplada, se hace necesario un mecanismo que abstraiga las operaciones CRUD (Crear, Leer, Actualizar, Borrar) y que orqueste la gesti\xf3n de transacciones. Esto nos permitir\xe1 cambiar el proveedor de persistencia (ej. de PostgreSQL a SQL Server o a una base de datos NoSQL) sin modificar la l\xf3gica de negocio central y tambien para permitir crear pruebas de forma mas controlada y facil durante el desarrollo."}),"\n",(0,r.jsx)(a.h2,{id:"decisi\xf3n",children:"Decisi\xf3n"}),"\n",(0,r.jsxs)(a.p,{children:["Se ha decidido implementar los patrones ",(0,r.jsx)(a.strong,{children:"Repository"})," y ",(0,r.jsx)(a.strong,{children:"Unit of Work"})," para gestionar la persistencia de datos en la aplicaci\xf3n."]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Patr\xf3n Repository:"})," Se crear\xe1 una interfaz gen\xe9rica ",(0,r.jsx)(a.code,{children:"IRepository<T>"})," en la capa de ",(0,r.jsx)(a.strong,{children:"Application"})," para definir las operaciones de consulta y persistencia de entidades. Esta interfaz ser\xe1 implementada por una clase concreta ",(0,r.jsx)(a.code,{children:"Repository<T>"})," en la capa de ",(0,r.jsx)(a.strong,{children:"Infraestructura"}),", utilizando ",(0,r.jsx)(a.strong,{children:"Entity Framework Core"}),". Esta implementaci\xf3n concreta se encargar\xe1 de interactuar directamente con el ",(0,r.jsx)(a.code,{children:"DbContext"}),". Se seguir\xe1n estos principios:","\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Interfaces en Application:"})," Las interfaces (",(0,r.jsx)(a.code,{children:"IRepository<T>"}),", ",(0,r.jsx)(a.code,{children:"ICategoryRepository"}),", etc.) vivir\xe1n en la capa de Application, definiendo el contrato que se necesita en la persistencia."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Implementaciones en Infraestructura:"})," Las clases concretas (",(0,r.jsx)(a.code,{children:"Repository<T>"}),", ",(0,r.jsx)(a.code,{children:"CategoryRepository"}),", etc.) vivir\xe1n en la capa de Infraestructura, conteniendo la l\xf3gica espec\xedfica de EF Core."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Abstracci\xf3n:"})," La l\xf3gica de negocio en la capa de Aplicaci\xf3n solo depender\xe1 de las interfaces, no de las implementaciones."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Patr\xf3n Unit of Work:"})," Se crear\xe1 una interfaz ",(0,r.jsx)(a.code,{children:"IUnitOfWork"})," en la capa de Aplicaci\xf3n. Esta interfaz servir\xe1 como una abstracci\xf3n para gestionar transacciones y guardar cambios. La implementaci\xf3n concreta ",(0,r.jsx)(a.code,{children:"UnitOfWork"})," se colocar\xe1 en la capa de ",(0,r.jsx)(a.strong,{children:"Infraestructura"})," y encapsular\xe1 el ",(0,r.jsx)(a.code,{children:"DbContext"}),". Su responsabilidad principal ser\xe1:","\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Orquestaci\xf3n de Repositorios:"})," Proporcionar\xe1 acceso a las instancias de los repositorios espec\xedficos (ej., ",(0,r.jsx)(a.code,{children:"IUnitOfWork.Categories"}),")."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Gesti\xf3n de Transacciones:"})," Tendr\xe1 un m\xe9todo ",(0,r.jsx)(a.code,{children:"SaveAsync()"})," que aplicar\xe1 todos los cambios pendientes en el ",(0,r.jsx)(a.code,{children:"DbContext"})," como una \xfanica transacci\xf3n, asegurando la atomicidad de las operaciones."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"alternativas-consideradas",children:"Alternativas Consideradas"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Repository sin Unit of Work:"})," Se descart\xf3 porque no ofrece una gesti\xf3n transaccional clara para m\xfaltiples operaciones de escritura. Dejar\xeda la responsabilidad de SaveChanges() a cada repositorio, lo que podr\xeda llevar a inconsistencias."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsxs)(a.strong,{children:["Usar el ",(0,r.jsx)(a.code,{children:"DbContext"})," directamente en la capa de Aplicaci\xf3n:"]})," Se descart\xf3 por completo. Romper\xeda la regla de dependencia de la arquitectura limpia, acoplando la l\xf3gica de negocio a una tecnolog\xeda de infraestructura (DbContext). Esto har\xeda las pruebas y el mantenimiento significativamente m\xe1s dif\xedciles."]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"consecuencias",children:"Consecuencias"}),"\n",(0,r.jsx)(a.h3,{id:"positivas-",children:"Positivas (+)"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Desacoplamiento:"})," La capa de Dominio y Aplicaci\xf3n no tienen dependencias directas de Entity Framework Core o de la base de datos. Esto facilita las pruebas unitarias y de integraci\xf3n."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Mantenibilidad:"})," El c\xf3digo es m\xe1s f\xe1cil de mantener, ya que la l\xf3gica de persistencia est\xe1 centralizada y separada de la l\xf3gica de negocio."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Consistencia de Datos:"})," El patr\xf3n Unit of Work garantiza que m\xfaltiples operaciones de escritura se manejen en una \xfanica transacci\xf3n, evitando estados inconsistentes en la base de datos."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Flexibilidad:"})," Permite cambiar f\xe1cilmente el proveedor de base de datos o el ORM en el futuro sin reescribir gran parte de la aplicaci\xf3n."]}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"negativas--",children:"Negativas (-)"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Complejidad Inicial:"})," A\xf1ade una capa de abstracci\xf3n que requiere m\xe1s interfaces y clases al inicio del proyecto."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Curva de Aprendizaje:"})," Requiere que los desarrolladores entiendan la implementaci\xf3n de estos patrones y c\xf3mo interact\xfaan con las diferentes capas de la arquitectura."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Sobrecarga de C\xf3digo:"})," Para funcionalidades muy simples, la abstracci\xf3n puede parecer excesiva. Sin embargo, se considera una inversi\xf3n necesaria para la escalabilidad y mantenibilidad a largo plazo del proyecto."]}),"\n"]}),"\n",(0,r.jsx)(a.hr,{})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>t});var i=n(6540);const r={},s=i.createContext(r);function o(e){const a=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:a},e.children)}}}]);