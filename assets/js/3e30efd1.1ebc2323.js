"use strict";(self.webpackChunkevent_reservation_app_docs=self.webpackChunkevent_reservation_app_docs||[]).push([[698],{1239:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"backend/Features/feature-Location/database","title":"02-database","description":"Archivo: 02-database.md","source":"@site/docs/backend/Features/01-feature-Location/02-database.md","sourceDirName":"backend/Features/01-feature-Location","slug":"/backend/Features/feature-Location/database","permalink":"/EventResourceReservationAppDocs/docs/backend/Features/feature-Location/database","draft":false,"unlisted":false,"editUrl":"https://github.com/jose-angell/EventResourceReservationAppDocs/docs/backend/Features/01-feature-Location/02-database.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"02-database"},"sidebar":"backendSidebar","previous":{"title":"01-overview","permalink":"/EventResourceReservationAppDocs/docs/backend/Features/feature-Location/overview"},"next":{"title":"03-endpoints","permalink":"/EventResourceReservationAppDocs/docs/backend/Features/feature-Location/endpoints"}}');var i=r(4848),o=r(8453);const s={sidebar_position:2,title:"02-database"},a="\ud83d\udce6 Modelo de datos",c={},d=[{value:"1. Entidades nuevas o modificadas",id:"1-entidades-nuevas-o-modificadas",level:2},{value:"Opci\xf3n B: Definici\xf3n con Clases de C# (EF Core Entities)",id:"opci\xf3n-b-definici\xf3n-con-clases-de-c-ef-core-entities",level:3},{value:"2. Migraciones de Base de Datos",id:"2-migraciones-de-base-de-datos",level:2},{value:"3. Relaciones e \xcdndices",id:"3-relaciones-e-\xedndices",level:2}];function l(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-modelo-de-datos",children:"\ud83d\udce6 Modelo de datos"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Archivo:"})," ",(0,i.jsx)(n.code,{children:"02-database.md"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Este documento describe las ",(0,i.jsx)(n.strong,{children:"entidades, tablas, migraciones y relaciones"})," de base de datos asociadas a la implementaci\xf3n de esta feature, asegurando la consistencia y la trazabilidad de los cambios en el esquema."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-entidades-nuevas-o-modificadas",children:"1. Entidades nuevas o modificadas"}),"\n",(0,i.jsx)(n.p,{children:"Definicion de las entidades de dominio y su mapeo a la base de datos (tablas, agregados). Se decidio utiliar un Id de tipo entero para los catologos, se agregaron campos de control para autizar y dar un correcto seguimiento a cada ubicacion."}),"\n",(0,i.jsx)(n.h3,{id:"opci\xf3n-b-definici\xf3n-con-clases-de-c-ef-core-entities",children:"Opci\xf3n B: Definici\xf3n con Clases de C# (EF Core Entities)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c#",children:'namespace ResourceReservationApp.Domain.Entities\r\n{\r\n    public class Location\r\n    {\r\n        public int Id { get; set; }\r\n        public string Country { get; set; }\r\n        public string City { get; set; }\r\n        public int ZipCode { get; set; }\r\n        public string Street { get; set; }\r\n        public string Neighborhood { get; set; }\r\n        public string ExteriorNumber { get; set; }\r\n        public string InteriorNumber { get; set; }\r\n        public Guid CreatedByUserId { get; set; }\r\n        public DateTime CreatedAt { get; set; }\r\n\r\n        public Location()\r\n        {\r\n            Country = string.Empty;\r\n            City = string.Empty;\r\n            Street = string.Empty;\r\n            Neighborhood = string.Empty;\r\n            ExteriorNumber = string.Empty;\r\n            InteriorNumber = string.Empty;\r\n        }\r\n        public Location(string country, string city, int zipCode, string street, string neighborhood, string exteriorNumber, string interiorNumber, Guid createdByUserId)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(country))\r\n            {\r\n                throw new ArgumentException("Country cannot be null or empty.", nameof(country));\r\n            }\r\n            if (string.IsNullOrWhiteSpace(city))\r\n            {\r\n                throw new ArgumentException("City cannot be null or empty.", nameof(city));\r\n            }\r\n            if (zipCode <= 0)\r\n            {\r\n                throw new ArgumentException("ZipCode must be a positive integer.", nameof(zipCode));\r\n            }\r\n            if (string.IsNullOrWhiteSpace(street))\r\n            {\r\n                throw new ArgumentException("Street cannot be null or empty.", nameof(street));\r\n            }\r\n            if (string.IsNullOrWhiteSpace(exteriorNumber))\r\n            {\r\n                throw new ArgumentException("ExteriorNumber cannot be null or empty.", nameof(neighborhood));\r\n            }\r\n            if (createdByUserId == Guid.Empty)\r\n            {\r\n                throw new ArgumentException("CreatedByUserId cannot be empty.", nameof(createdByUserId));\r\n            }\r\n            Country = country;\r\n            City = city;\r\n            ZipCode = zipCode;\r\n            Street = street;\r\n            Neighborhood = neighborhood ?? string.Empty;\r\n            ExteriorNumber = exteriorNumber;\r\n            InteriorNumber = interiorNumber ?? string.Empty;\r\n            CreatedByUserId = createdByUserId;\r\n            CreatedAt = DateTime.UtcNow;\r\n        }\r\n        public void Update(string country, string city, int zipCode, string street, string neighborhood, string exteriorNumber, string interiorNumber)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(country))\r\n            {\r\n                throw new ArgumentException("Country cannot be null or empty.", nameof(country));\r\n            }\r\n            if (string.IsNullOrWhiteSpace(city))\r\n            {\r\n                throw new ArgumentException("City cannot be null or empty.", nameof(city));\r\n            }\r\n            if (zipCode <= 0)\r\n            {\r\n                throw new ArgumentException("ZipCode must be a positive integer.", nameof(zipCode));\r\n            }\r\n            if (string.IsNullOrWhiteSpace(street))\r\n            {\r\n                throw new ArgumentException("Street cannot be null or empty.", nameof(street));\r\n            }\r\n            if (string.IsNullOrWhiteSpace(exteriorNumber))\r\n            {\r\n                throw new ArgumentException("ExteriorNumber cannot be null or empty.", nameof(neighborhood));\r\n            }\r\n            Country = country;\r\n            City = city;\r\n            ZipCode = zipCode;\r\n            Street = street;\r\n            Neighborhood = neighborhood ?? string.Empty;\r\n            ExteriorNumber = exteriorNumber;\r\n            InteriorNumber = interiorNumber ?? string.Empty;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"2-migraciones-de-base-de-datos",children:"2. Migraciones de Base de Datos"}),"\n",(0,i.jsx)(n.p,{children:"Lista todas las migraciones de EF Core creadas o modificadas para esta feature."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"20250821043923_20250820_InitialLocationMitragion"}),": Crea la tabla de Ubicacines con sus campos iniciales."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"20250823051935_20250822_FixCreatedDateLocation"})," : correccion en el campo de control para la fecha de creacion."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-relaciones-e-\xedndices",children:"3. Relaciones e \xcdndices"}),"\n",(0,i.jsx)(n.p,{children:"Documenta las relaciones entre tablas (claves for\xe1neas) y los \xedndices creados para optimizar el rendimiento de las consultas y asegurar la integridad de los datos."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Columna"}),(0,i.jsxs)(n.th,{children:["Tipo Tipo / Cardinalidad ",(0,i.jsx)("br",{})," (FK/INDEX)"]}),(0,i.jsx)(n.th,{children:"Columna Destino (si es FK)"}),(0,i.jsx)(n.th,{children:"Prop\xf3sito / Justificaci\xf3n"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<Locations>.<CreatedByUserId>"})}),(0,i.jsx)(n.td,{children:"FK"}),(0,i.jsx)(n.td,{children:"User(Id)"}),(0,i.jsx)(n.td,{children:"Integridad referencial: Asegura que una ubicacion tenga un responsable."})]})})]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);