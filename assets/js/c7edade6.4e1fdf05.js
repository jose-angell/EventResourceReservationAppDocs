"use strict";(self.webpackChunkevent_reservation_app_docs=self.webpackChunkevent_reservation_app_docs||[]).push([[6876],{6121:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"backend/Features/feature-Category/database","title":"02-database","description":"Archivo: 02-database.md","source":"@site/docs/backend/Features/01-feature-Category/02-database.md","sourceDirName":"backend/Features/01-feature-Category","slug":"/backend/Features/feature-Category/database","permalink":"/EventResourceReservationAppDocs/docs/backend/Features/feature-Category/database","draft":false,"unlisted":false,"editUrl":"https://github.com/jose-angell/EventResourceReservationAppDocs/docs/backend/Features/01-feature-Category/02-database.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"02-database"},"sidebar":"backendSidebar","previous":{"title":"01-overview","permalink":"/EventResourceReservationAppDocs/docs/backend/Features/feature-Category/overview"},"next":{"title":"03-endpoints","permalink":"/EventResourceReservationAppDocs/docs/backend/Features/feature-Category/endpoints"}}');var r=a(4848),s=a(8453);const i={sidebar_position:2,title:"02-database"},o="\ud83d\udce6 Modelo de datos",d={},c=[{value:"1. Entidades nuevas o modificadas",id:"1-entidades-nuevas-o-modificadas",level:2},{value:"Opci\xf3n B: Definici\xf3n con Clases de C# (EF Core Entities)",id:"opci\xf3n-b-definici\xf3n-con-clases-de-c-ef-core-entities",level:3},{value:"2. Migraciones de Base de Datos",id:"2-migraciones-de-base-de-datos",level:2},{value:"3. Relaciones e \xcdndices",id:"3-relaciones-e-\xedndices",level:2}];function l(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-modelo-de-datos",children:"\ud83d\udce6 Modelo de datos"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Archivo:"})," ",(0,r.jsx)(n.code,{children:"02-database.md"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Este documento describe las ",(0,r.jsx)(n.strong,{children:"entidades, tablas, migraciones y relaciones"})," de base de datos asociadas a la implementaci\xf3n de esta feature, asegurando la consistencia y la trazabilidad de los cambios en el esquema."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-entidades-nuevas-o-modificadas",children:"1. Entidades nuevas o modificadas"}),"\n",(0,r.jsx)(n.p,{children:"Definicion de las entidades de dominio y su mapeo a la base de datos (tablas, agregados). Se decidio utiliar un Id de tipo entero para los catologos, se agregaron campos de control para autizar y dar un correcto seguimiento a cada categoria."}),"\n",(0,r.jsx)(n.h3,{id:"opci\xf3n-b-definici\xf3n-con-clases-de-c-ef-core-entities",children:"Opci\xf3n B: Definici\xf3n con Clases de C# (EF Core Entities)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'namespace ResourceReservationApp.Domain.Entities\r\n{\r\n    public class Category\r\n    {\r\n        public int Id { get; set; }\r\n        public string Name { get; set; }\r\n        public string Description { get; set; }\r\n        public DateTime CreatedAt { get; set; }\r\n        public Guid CreatedByUserId { get; set; }\r\n\r\n        public Category()\r\n        {\r\n            Name = string.Empty;\r\n            Description = string.Empty;\r\n        }\r\n        public Category(string name, string description, Guid createdByUserId)\r\n        {\r\n            if (string.IsNullOrEmpty(name))\r\n            {\r\n                throw new ArgumentException("Name cannot be null or empty.", nameof(name));\r\n            }\r\n            if (name.Length > 100)\r\n            {\r\n                throw new ArgumentException("Name cannot exceed 100 characters.", nameof(name));\r\n            }\r\n            if (createdByUserId == Guid.Empty)\r\n            {\r\n                throw new ArgumentException("CreatedByUserId cannot be empty.", nameof(createdByUserId));\r\n            }\r\n            Name = name;\r\n            Description = description ?? string.Empty;\r\n            CreatedAt = DateTime.UtcNow;\r\n            CreatedByUserId = createdByUserId;\r\n        }\r\n        public void Update(string name, string description)\r\n        {\r\n            if (string.IsNullOrEmpty(name))\r\n            {\r\n                throw new ArgumentException("Name cannot be null or empty.", nameof(name));\r\n            }\r\n            if (name.Length > 100)\r\n            {\r\n                throw new ArgumentException("Name cannot exceed 100 characters.", nameof(name));\r\n            }\r\n            Name = name;\r\n            Description = description ?? string.Empty;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"2-migraciones-de-base-de-datos",children:"2. Migraciones de Base de Datos"}),"\n",(0,r.jsx)(n.p,{children:"Lista todas las migraciones de EF Core creadas o modificadas para esta feature."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"20250728001946_InitialCategoryMigration"}),": Crea la tabla de Categories con sus campos iniciales."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-relaciones-e-\xedndices",children:"3. Relaciones e \xcdndices"}),"\n",(0,r.jsx)(n.p,{children:"Documenta las relaciones entre tablas (claves for\xe1neas) y los \xedndices creados para optimizar el rendimiento de las consultas y asegurar la integridad de los datos."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Columna"}),(0,r.jsxs)(n.th,{children:["Tipo Tipo / Cardinalidad ",(0,r.jsx)("br",{})," (FK/INDEX)"]}),(0,r.jsx)(n.th,{children:"Columna Destino (si es FK)"}),(0,r.jsx)(n.th,{children:"Prop\xf3sito / Justificaci\xf3n"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<Categories>.<CreatedByUserId>"})}),(0,r.jsx)(n.td,{children:"FK"}),(0,r.jsx)(n.td,{children:"User(Id)"}),(0,r.jsx)(n.td,{children:"Integridad referencial: Asegura que una categoria tenga un responsable."})]})})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);